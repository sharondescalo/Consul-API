# -*- mode: ruby -*-
# vi: set ft=ruby :
#

LINUX_BASE_BOX = "bento/ubuntu-18.04"
LINUX_IP_ADDRESS = "10.199.0.200"

Vagrant.configure(2) do |config|
	serverName = "consul-server"
  serverIP = "10.199.0.10"


config.vm.define serverName, autostart: true, primary: true do |vmCfg|
		vmCfg.vm.box = LINUX_BASE_BOX
		vmCfg.vm.hostname = serverName
		vmCfg = configureProviders(vmCfg)
		vmCfg = configureLinuxProvisioners(vmCfg)
		vmCfg = configurePrometheusProvisioners(vmCfg)

		vmCfg.vm.provider "virtualbox" do |_|
			vmCfg.vm.network :private_network, ip: serverIP
			vmCfg.vm.network :forwarded_port, guest: 8500, host: 8500 # consul-ui
			vmCfg.vm.network :forwarded_port, guest: 9090, host: 9090 # postgres-ui
		end

		vmCfg.vm.synced_folder './config', '/mnt/my-machine'

		vmCfg.vm.provision "shell",
			privileged: true,
			path: './scripts/consul-server.sh',
			args: [serverIP]
	end

  def configureLinuxProvisioners(vmCfg)
    vmCfg.vm.provision "shell",
      privileged: true,
      inline: 'rm -f /home/vagrant/linux.iso'
  
    vmCfg.vm.provision "shell",
      privileged: true,
      path: './scripts/vagrant-linux-priv-config.sh'
  
    vmCfg.vm.provision "shell",
      privileged: true,
      path: './scripts/vagrant-linux-priv-consul.sh'
  
    return vmCfg
  end
  
  def configurePrometheusProvisioners(vmCfg)
    vmCfg.vm.provision "shell",
      privileged: true,
      path: './scripts/vagrant-linux-priv-prometheus.sh'
  
    vmCfg.vm.provision "shell",
      privileged: true,
      path: './scripts/prometheus-server.sh'
  
    return vmCfg
  end
  
  def configureProviders(vmCfg, cpus: "1", memory: "1024")
    vmCfg.vm.provider "virtualbox" do |v|
      v.customize ["modifyvm", :id, "--cableconnected1", "on"]
      v.memory = memory
      v.cpus = cpus
    end
  
    ["vmware_fusion", "vmware_workstation"].each do |p|
      vmCfg.vm.provider p do |v|
        v.enable_vmrun_ip_lookup = false
        v.vmx["memsize"] = memory
        v.vmx["numvcpus"] = cpus
      end
    end
  
    vmCfg.vm.provider "virtualbox" do |v|
      v.customize ["modifyvm", :id, "--cableconnected1", "on", "--audio", "none"]
      v.memory = memory
      v.cpus = cpus
    end
    return vmCfg
  end
end
  